scriptencoding utf8

set eol
set nobinary
" set t_Co=256
" set t_AB=^[[48;5;%dm
" set t_AF=^[[38;5;%dm
" set notermguicolors

set cursorline
set cursorcolumn

set foldcolumn=2

set relativenumber!

inoremap kj <esc>l

" highlight helper

fu! ShowHighlight()
  echo "hi<" . synIDattr(synID(line("."),col("."),1),"name") . '> trans<' . synIDattr(synID(line("."),col("."),0),"name") . "> lo<" . synIDattr(synIDtrans(synID(line("."),col("."),1)),"name") . ">"
endfu
map ,L :call ShowHighlight()<cr>
command! HI call ShowHighlight()<cr>

set modeline

" to use :Run command    - will pipe to quickfix window
" command -nargs=+ Run :cexpr system('<args>') | copen


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""""""""""""""""""""""""""" COLORS """""""""""""""""""""""""""""""""
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

if exists('$TMUX')
  let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
  let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
else
  let &t_SI = "\<Esc>]50;CursorShape=1\x7"
  let &t_EI = "\<Esc>]50;CursorShape=0\x7"
endif

" if 0 ==  argc()
"   if getcwd() == "/Users/vitaly/my/config/dotvim2"
"     silent OpenTabSession vim2
"   endif
" endif


let NERDTreeSortOrder=['*']

noremap             <plug>(Paste-Mode-Insert) :set paste<cr>o
nmap    <leader>i   <plug>(Paste-Mode-Insert)


" highlight column after textwidth
set cc=+1

" nunmap <leader>t
" nmap <leader>t :Tags<cr>


let g:ycm_filepath_completion_use_working_dir = 1

" disable intro message
set shortmess+=I

nmap ,Q :qa<cr>

set virtualedit=all

let g:session_autosave = 'no'
let g:session_autoload = 'no'

nmap <leader>H :Helptags<cr>

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_javascript_checkers = ['eslint']
let g:gutentags_project_root += [ '.ctags.d', 'tags' ]
" echo g:gutentags_project_root

set mouse=nvc

" :GutentagsToggleTrace
let g:gutentags_generate_on_new = 0
let g:gutentags_generate_on_missing = 0

" nvim-only config
if has("nvim")
  call my#keymap#leader('z', '+Terminal')

  noremap  <silent> <Plug>(Terminal/zsh) :term zsh<cr>
  nmap     <leader>zz   <Plug>(Terminal/zsh)

  noremap  <silent> <Plug>(Terminal/bash) :term bash<cr>
  nmap     <leader>zb   <Plug>(Terminal/bash)

  noremap  <silent> <Plug>(Terminal/fish) :term fish<cr>
  nmap     <leader>zf   <Plug>(Terminal/fish)

  noremap  <silent> <Plug>(Terminal/sh) :term sh<cr>
  nmap     <leader>zs   <Plug>(Terminal/sh)

  highlight TermCursor ctermfg=red guifg=red

  augroup TerminalInsertHandling
    au!
    " for some reason clicking in a terminal buffer exists insert more
    au TermOpen                 *  nnoremap <buffer><LeftRelease> <LeftRelease>i
    " start in insert more
    au TermOpen,BufEnter,FocusGained term://*  startinsert
  augroup END

  tnoremap <Esc><space> <C-\><C-n>
endif

" inoremap <expr><tab> pumvisible() ? "\<c-n>" : "\<tab>"

" inoremap <expr><tab> pumvisible() ? "\<c-y>" : "\<tab>"

" inoremap <expr><c-j> pumvisible() ? "\<down>" : "\<c-j>"
" inoremap <expr><c-k> pumvisible() ? "\<up>" : "\<c-k>"

inoremap <c-j> <down>
inoremap <c-k> <up>
inoremap <c-h> <left>
inoremap <c-l> <right>

cnoremap <c-k> <up>
cnoremap <c-j> <down>


let g:over#command_line#search#enable_move_cursor = 1







"inoremap <expr> j ((pumvisible())?("\<C-n>"):("j"))





nmap <leader>bm :messages<cr>






set diffopt-=internal
function! s:checkDiffModeEnter()
  if &diff && ! exists('b:diffMode')
    let b:diffMode=1
    doautocmd User DiffModeEnter
  endif
endfunction

function! s:checkDiffModeLeave()
  if ! &diff && exists('b:diffMode')
    unlet b:diffMode
    doautocmd User DiffModeLeave
  endif
endfunction

function! s:onDiffModeEnter()
  nmap <buffer> <localleader>du :diffupdate<CR>
  nmap <buffer> <localleader>dp :diffput<CR>
  nmap <buffer> <localleader>dg :diffget<CR>
  nmap <buffer> <localleader>n ]c
  nmap <buffer> <localleader>p [c
endfunction

function! s:onDiffModeLeave()
  nunmap <buffer> <localleader>du
  nunmap <buffer> <localleader>dp
  nunmap <buffer> <localleader>dg
  nunmap <buffer> <localleader>n
  nunmap <buffer> <localleader>p
endfunction

augroup diffbindings
  au!
  au FilterWritePre          * call s:checkDiffModeEnter()
  au FilterWritePre,BufWrite * call s:checkDiffModeLeave()

  au User DiffModeEnter call s:onDiffModeEnter()
  au User DiffModeLeave call s:onDiffModeLeave()
augroup END






""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"" ORG MODE """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

let g:org_todo_keywords = [['TODO', 'NOW', 'NEXT', 'WAIT', '|', 'DONE', 'SKIP', 'CANCELED', 'ARCHIVED']]
let g:org_todo_keyword_faces = [
      \ ['WAIT', 'red'],
      \ ['NEXT', 'blue'],
      \ ['SKIP', 'yellow'],
      \ ['CANCELED', 'grey'],
      \]

" au FileType org nmap <buffer> <localleader>tn <Plug>OrgTodoForward
" au FileType org nmap <buffer> <localleader>tp <Plug>OrgTodoBackward

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"let &errorformat ='%-C,%E  [%n] %#%f:%l: %.%#,%C%m,%Z%p^'
" set makeprg=make

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

let g:UltiSnipsSnippetsDir = "~/.vim/UltiSnips"

let g:SuperTabDefaultCompletionType = "context"

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"" NEOPLETE CONFIG """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" let g:deoplete#keyword_patterns.q = '[.a-zA-Z_]\k*'


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"" IndentLine Settings """""""""""""""""""""""""""""""""""""""""""""""""""""""""
" let g:indentLine_char = 'â”Š'
" let g:indentLine_char = '.'
" let g:indentLine_color_term = 30
" let g:indentLine_bgcolor_term = 10
" exe "IndentLinesToggle"
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

source ~/.vim/local/my/theme/vimrc.theme

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

source ~/.vim/local/my/vimrc.preview

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" AirlineTheme light
" AirlineTheme cool
" AirlineTheme one

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" au! CursorHold *.js nested exe "silent! ptag " . expand("<cword>")
" au! CursorHold *.js nested call LanguageClient#textDocument_hover()

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" let g:neoformat_enabled_typescript = ['prettier']
" let g:neoformat_enabled_typescryptreact = ['prettier']

" let g:neoformat_verbose = 1
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
func! MotionJoinOperator(submode)
  '[,']join
endfunc
nnoremap gj :set operatorfunc=MotionJoinOperator<CR>g@

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
nnoremap <C-j> :m .+1<CR>==
nnoremap <C-k> :m .-2<CR>==
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
vnoremap <C-j> :m '>+1<CR>gv=gv
vnoremap <C-k> :m '<-2<CR>gv=gv
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
cnoreabbrev h vert bo h
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:is_bash = 1
map <silent><esc> :silent noh<cr>
set ic

let g:taskwiki_sort_order = "pri-"

if !argc() && filereadable('.session.vim')
  echo "loading session"
  so ./.session.vim
endif

" set diffopt+=iwhiteall

" let g:neoformat_verbose = 1


let g:which_key_use_floating_win = 0
let g:which_key_align_by_seperator = 1


let g:NERDTreeQuitOnOpen = 1
let g:EditorConfig_max_line_indicator = 'line'

command! LogOn set verbosefile=~/.vim/log | set verbose=9
command! LogOff set verbose=0 | set verbosefile=

fu! Toggle_verbose_log() abort
  if 0 == &verbose
    LogOn
  else
    LogOff
  endif
endf

noremap <silent>                       <plug>(Toggle/Verbose-Log) :call Toggle_verbose_log()<CR>
nmap    <leader>Tv                     <plug>(Toggle/Verbose-Log)




" Tell vim to remember certain things when we exit
" !     :  remember ALL_CAPS_VARIABLES
"  '100 :  marks will be remembered for up to 10 previously edited files
"  <500 :  upto 50 lines saved per register
"  "100 :  will save up to 100 lines for each register
"  s100 :  saves upto 100K per item
"  h    :  disable hlsearch on load
"  %    :  saves and restores the buffer list
" set shada=!,'100,<500,s100,h
