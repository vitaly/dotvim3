scriptencoding utf8

function s:SID(name)
  return '<SNR>' . matchstr(expand('<sfile>'), '<SNR>\zs\d\+\ze_SID$') . '_' . a:name
endfun

function! s:ro()
  return "%{(&readonly || !&modifiable) ? '⭤' : ''}"
endfunction

function! s:git()
  let branch = fugitive#head()
  return branch !=# '' ? '⭠ ' . branch : ''
endfunction


"✸"
"⌬"
"©"
"℗"
"✵"
"❃"
"©"
"⎃"
"⍟"
"⌾"
"⎏"
"⎉"
"⌁"
"⌗"
"⨹"
"

function! s:tags_cb(mods) abort
  " return "⌁"
  return "❃"
endfunction

function! s:gutentags()
  return "%{gutentags#statusline_cb(function('" . s:SID('tags_cb') . "'))}"
  " return "foo"
endfunction
" echom s:gutentags()
" echom s:SID('gutentags')

let g:lightline = {}


fu LightlineColorscheme(name)
  let g:lightline.colorscheme = a:name
  call lightline#init()
  call lightline#colorscheme()
  call lightline#update()
endfu


let g:lightline.colorscheme = 'PaperColor'

" call LightlineColorscheme('PaperColor')

" call LightlineColorscheme('Dracula')
" call LightlineColorscheme('materia')
" call LightlineColorscheme('molokai')
" call LightlineColorscheme('darcula')
" call LightlineColorscheme('deus')
" call LightlineColorscheme('material')
" call LightlineColorscheme('solarized')
" call LightlineColorscheme('Tomorrow')
" call LightlineColorscheme('Tomorrow_Night')
" call LightlineColorscheme('Tomorrow_Night_Blue')

let g:lightline.active = {}
let g:lightline.active.left = [
      \  ['mode', 'paste'],
      \  ['git'],
      \  ['ro', 'filename', 'modified', 'gutentags'],
      \]
let g:lightline.active.right = [
      \ ['lineinfo'],
      \ ['char_hex'],
      \ ['fileformat', 'fileencoding', 'filetype'],
      \ ['linter_checking', 'linter_errors', 'linter_warnings', 'linter_ok'],
      \]

let g:lightline.component = {}
let g:lightline.component.char_hex = '0x%02B'

let g:lightline.component_expand = {}
let g:lightline.component_expand.linter_checking = 'lightline#ale#checking'
let g:lightline.component_expand.linter_warnings = 'lightline#ale#warnings'
let g:lightline.component_expand.linter_errors   = 'lightline#ale#errors'
let g:lightline.component_expand.linter_ok       = 'lightline#ale#ok'
let g:lightline.component_expand.ro              = s:SID('ro')
let g:lightline.component_expand.gutentags       = s:SID('gutentags')

let g:lightline.component_function = {}
let g:lightline.component_function.git = s:SID('git')

let g:lightline.component_type = {}
let g:lightline.component_type.linter_checking = 'left'
let g:lightline.component_type.linter_warnings = 'warning'
let g:lightline.component_type.linter_errors   = 'error'
let g:lightline.component_type.linter_ok       = 'left'
let g:lightline.component_type.ro              = 'error'
let g:lightline.component_type.gutentags       = 'error'

let g:lightline#ale#indicator_checking = '...'
let g:lightline#ale#indicator_warnings = '◆'
let g:lightline#ale#indicator_errors = '✗'
let g:lightline#ale#indicator_ok = '✓'

augroup MyAuLightLine
  au!
  au User GutentagsUpdating call lightline#update()
  au User GutentagsUpdated call lightline#update()
augroup END
