
" src/plugins/20-settings/files/vimrc.after -------------------

" make Y consistent with C and D
" must be in 'after' to prevent yankring overriding it
nnoremap Y y$

" src/plugins/20-settings/plugins/keymap/files/vimrc.after -------------------

set timeoutlen=500

" src/plugins/20-settings/plugins/keymap/engine/which_key/files/vimrc.after -------------------

let g:WhichKeyFormatFunc = function('my#keymap#format')

augroup RegisterKeyMap
  autocmd!
  autocmd   User    vim-which-key     call which_key#register(' ', 'g:my#keymap#leader#map')
  autocmd   User    vim-which-key     call which_key#register(',', 'g:my#keymap#localleader#map')
  autocmd   User    vim-which-key     call which_key#register('g', 'g:my#keymap#g#map')
augroup END

nnoremap <silent> <leader>      :<c-u>WhichKey       ' '<CR>
nnoremap <silent> <localleader> :<c-u>WhichKey       ','<CR>
nnoremap <silent> g?            :<c-u>WhichKey       'g'<CR>

vnoremap <silent> <leader>      :<c-u>WhichKeyVisual ' '<CR>
vnoremap <silent> <localleader> :<c-u>WhichKeyVisual ','<CR>

let g:which_key_sep = "|"

" src/plugins/30-general/plugins/multiple-cursors/files/vimrc.after -------------------

hi multiple_cursors_cursor ctermbg=red ctermfg=blue guibg=red guifg=blue
hi multiple_cursors_visual ctermbg=yellow ctermfg=black guibg=yellow guifg=black
let g:multi_cursor_exit_from_insert_mode = 0

" src/plugins/40-ide/plugins/10-completion/engine/coc/files/vimrc.after -------------------

" hi CocHighlightText cterm=underline gui=underline
hi CocHighlightText cterm=inverse gui=inverse
" autocmd CursorHold * silent call CocActionAsync('doHover')

fun! HoverAction()
  call CocActionAsync('highlight')
  call CocActionAsync('showSignatureHelp')
endf

" we have auto-insert on entering a terminal buffer
" so if we first execute the click, we'll be in insert modee for :call ...
" so we start hover action first, then click
" it will work on the new location, not old
nnoremap <silent><LeftMouse> :call HoverAction()<cr><LeftMouse>

let g:hover_on_hold = get(g:, "hover_on_hold", 1)
fun! HoverActionOnHold()
  if g:hover_on_hold
    call HoverAction()
  endif
endf

augroup HoldHoverActions
  au!
  au CursorHold * silent call HoverActionOnHold()
  au User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup END

fu! Toggle_hover_on_hold()
  let g:hover_on_hold = ! g:hover_on_hold
  echo g:hover_on_hold
endfu

noremap                     <plug>(Toggle/Hover-On-Hold) :call Toggle_hover_on_hold()<cr>
nmap    <silent> <leader>Th <plug>(Toggle/Hover-On-Hold)

" src/plugins/40-ide/plugins/50-tags/files/vimrc.after -------------------

call add(g:gutentags_project_info, {'type': 'javascript', 'file': 'package.json'})

" src/plugins/50-fuzzy-tools/plugins/00-unite/files/vimrc.after -------------------

call unite#filters#matcher_default#use(['matcher_fuzzy'])

" src/plugins/99-final/plugins/10-local-configs/files/vimrc.after -------------------

source ~/.vim/local/vimrc.after
