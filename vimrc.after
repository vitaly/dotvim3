
" src/plugins/20-settings/files/vimrc.after -------------------

" make Y consistent with C and D
" must be in 'after' to prevent yankring overriding it
nnoremap Y y$

" src/plugins/20-settings/plugins/leader-guide/files/vimrc.after -------------------

function! s:my_displayfunc()
  let g:leaderGuide#displayname =
        \ substitute(g:leaderGuide#displayname, '\c<cr>$', '', '')
  let g:leaderGuide#displayname =
        \ substitute(g:leaderGuide#displayname, '^<Plug>', '', '')
  let g:leaderGuide#displayname =
        \ substitute(g:leaderGuide#displayname, '^(\(\w\+/\)*\w\+/\(.*\))$', '\2', '')
  let g:leaderGuide#displayname =
        \ substitute(g:leaderGuide#displayname, '^(\(.*\))$', '\1', '')
  let g:leaderGuide#displayname =
        \ substitute(g:leaderGuide#displayname, '[-_()]', ' ', 'g')
endfunction
let g:leaderGuide_displayfunc = [function("s:my_displayfunc")]

let g:topdict = {}
let g:topdict[' '] = g:leader_map_guide
let g:topdict[' ']['name'] = '<leader>'
let g:topdict[','] = g:local_leader_map_guide
let g:topdict[',']['name'] = '<localleader>'
call leaderGuide#register_prefix_descriptions("", "g:topdict")

set timeoutlen=500

noremap <plug>guide(global)  :<c-u>LeaderGuide '<Space>'<CR>
noremap <plug>guide(local)   :<c-u>LeaderGuide ','<CR>
noremap <plug>vguide(global) :<c-u>LeaderGuideVisual  '<space>'<CR>
noremap <plug>vguide(local)  :<c-u>LeaderGuideVisual  ','<CR>

map <silent> <leader>      <plug>guide(global)
map <silent> <localleader> <plug>guide(local)

vmap <silent> <leader>      <plug>vguide(global)
vmap <silent> <localleader> <plug>vguide(local)

" src/plugins/30-general/plugins/multiple-cursors/files/vimrc.after -------------------

hi multiple_cursors_cursor ctermbg=red ctermfg=blue guibg=red guifg=blue
hi multiple_cursors_visual ctermbg=yellow ctermfg=black guibg=yellow guifg=black
let g:multi_cursor_exit_from_insert_mode = 0

" src/plugins/40-ide/plugins/statusline/lightline/files/vimrc.after -------------------

runtime status/lightline.vim

" src/plugins/40-ide/plugins/tags/files/vimrc.after -------------------

call add(g:gutentags_project_info, {'type': 'javascript', 'file': 'package.json'})

" src/plugins/50-fuzzy-tools/plugins/00-unite/files/vimrc.after -------------------

call unite#filters#matcher_default#use(['matcher_fuzzy'])

" src/plugins/80-base16/files/vimrc.after -------------------

" including in vimrc.bindings to setup colors early, and
" allow other plugins to override in vimrc.after
if filereadable(expand("~/.vimrc_background"))
  let base16colorspace=256
  source ~/.vimrc_background
  " hi DiffChange ctermfg=blue
endif

" src/plugins/99-final/plugins/10-local-configs/files/vimrc.after -------------------

source ~/.vim/local/vimrc.after
