
" src/plugins/20-settings/files/vimrc.after -------------------

" make Y consistent with C and D
" must be in 'after' to prevent yankring overriding it
nnoremap Y y$

" src/plugins/20-settings/plugins/keymap/files/vimrc.after -------------------

set timeoutlen=500

" src/plugins/20-settings/plugins/keymap/engine/leader_guide/files/vimrc.after -------------------

fu! LeaderguideMenuItem()
  let g:leaderGuide#displayname = my#keymap#format(g:leaderGuide#displayname)
endfu
let g:leaderGuide_displayfunc = [function("LeaderguideMenuItem")]

let g:topdict = {}
let g:topdict[' '] = g:my#keymap#leader#map
let g:topdict[' ']['name'] = '<leader>'
let g:topdict[','] = g:my#keymap#localleader#map
let g:topdict[',']['name'] = '<localleader>'
call leaderGuide#register_prefix_descriptions("", "g:topdict")

nnoremap <silent> <leader>      :<c-u>LeaderGuide       ' '<CR>
nnoremap <silent> <localleader> :<c-u>LeaderGuide       ','<CR>
vnoremap <silent> <leader>      :<c-u>LeaderGuideVisual ' '<CR>
vnoremap <silent> <localleader> :<c-u>LeaderGuideVisual ','<CR>

map  <leader>.      <Plug>leaderguide-global
map  <localleader>. <Plug>leaderguide-buffer

" src/plugins/30-general/plugins/multiple-cursors/files/vimrc.after -------------------

hi multiple_cursors_cursor ctermbg=red ctermfg=blue guibg=red guifg=blue
hi multiple_cursors_visual ctermbg=yellow ctermfg=black guibg=yellow guifg=black
let g:multi_cursor_exit_from_insert_mode = 0

" src/plugins/40-ide/plugins/10-completion/engine/coc/files/vimrc.after -------------------

" hi CocHighlightText cterm=underline gui=underline
hi CocHighlightText cterm=inverse gui=inverse
" autocmd CursorHold * silent call CocActionAsync('doHover')

fun! HoverAction()
  call CocActionAsync('highlight')
  call CocActionAsync('showSignatureHelp')
endf

nnoremap <silent><LeftMouse> <LeftMouse>:call HoverAction()<cr>

let g:hover_on_hold = get(g:, "hover_on_hold", 1)
fun! HoverActionOnHold()
  if g:hover_on_hold
    call HoverAction()
  endif
endf

augroup HoldHoverActions
  au!
  au CursorHold * silent call HoverActionOnHold()
augroup END

fu! Toggle_hover_on_hold()
  let g:hover_on_hold = ! g:hover_on_hold
  echo g:hover_on_hold
endfu

noremap                     <plug>(Toggle/Hover-On-Hold) :call Toggle_hover_on_hold()<cr>
nmap    <silent> <leader>Th <plug>(Toggle/Hover-On-Hold)

" src/plugins/40-ide/plugins/tags/files/vimrc.after -------------------

call add(g:gutentags_project_info, {'type': 'javascript', 'file': 'package.json'})

" src/plugins/50-fuzzy-tools/plugins/00-unite/files/vimrc.after -------------------

call unite#filters#matcher_default#use(['matcher_fuzzy'])

" src/plugins/99-final/plugins/10-local-configs/files/vimrc.after -------------------

source ~/.vim/local/vimrc.after
