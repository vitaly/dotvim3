# allow toggling of "clipboard" setting in vim, allowing sharing of
# clipboard content b/w  vim and OS
# 
# initial clipboard is in an 'internal' mode (e.g. not shared)
# 
# see bindings.
# 
# Note: if you chose "splus" and it doesn't seem to work, try "star"
# Valid options:
# 1: off       - disable clipboard toggle
# 2: star      - yank uses register * (clipboard=unnamed)
# 3: plus      - yank uses register + (clipboard=unnamed plus)
# : Which clipboard mode should be used fror toggling
clipboard=star

# 
# : Should clipboard start in shared mode?
clipboard_shared=y

# Which plugin to use for keymap menus?
# Valid options:
# 1: which_key     - use which-key
# 2: leader_guide  - use leader-guide (deprecated)
# : keymap engine?
keymap_engine=which_key

# If your terminal is ISO-8613-3 compatible you can use gui colors, e.g.
# guilfg/guilbg of color themes instead of ctermbg/ctermfg.
# 
# You can check by running ":echo has('termguicolors')<CR>".
# 
# Answer No if you do not want to use gui colors even on a comnpatible terminal.
# : use terminal gui colors (on compatible terminals)?
set_termguicolors=y

# vim-diminactive can dim inactive window splits
# : Dim inactive window splits?
diminactive=y

# The dimning can be done with colorcolunbs (it changes background of inactive
# splits), or with switching the syntax highlighting off for inactive splits.
# Valid options:
# 1: off         - disable diminactive 
# 2: syntax      - dim by disabling syntax highlighting
# 3: colors      - dim by changing background
# : Which dimming mode to set?
dim_mode=off

# What plugin to use to visualize indentation level:
# Valid options:
# 1: guides - Indent-Guides
# 2: lines  - Yggdroot/indentLine
# 3: -      - none
# : indentation plugin?
visual_indent=-

# 
# : Sublime-like multiple cursors support?
multiple_cursors=y

# 
# : install NerdTree(and tools) and NerdCommenter?
nerdtools=y

# 
# : Install NerdTree?
nerdtree=y

# A plugin of NERDTree showing git status flags.
# : install nerdtree-git-plugin plugin?
nerdtree_git=y

# 
# : Install NerdTreeTabs?
nerdtree_tabs=y

# 
# : Sessions support?
session=n

# switch.vim is a simple Vim plugin to switch segments of text with predefined replacements.
# 
# e.g. switch 'foo' with "foo" with :foo etc
# : Install switch.vim?
switch_vim=y

# 
# : VimWiki support?
vimwiki=y

# Taskwarrior is Free and Open Source Software that manages your TODO list from
# the command line. It is flexible, fast, and unobtrusive. It does its job then
# gets out of your way.
# See https://taskwarrior.org
# 
# VIM can integrate with Taskwarrior's task utility to display todos in specially
# formatted files.
# : Taskwarrior support
taskwarrior=n

# IDE features include code completion, linting, language server support, tags, etc
# : install IDE features
ide=y

# 
# : code snippets support?
snippets=y

# What completion plugin to use?
# Valid options:
# 1: deoplete - use Deoplete (deprecated)
# 2: coc      - use COC
# 3: none     - None
# : completion engine?
completion_engine=coc

# what version of COC.NVIM to install:
# Valid options:
# 1: release - latest official release
# 2: edge    - build from latest master branch 
# : COC version?
coc_version=release

# Statusline provider
# Valid options:
# 1: none not recommended ;)
# 2: airline (DEPRECATED) I haven't used it for a while.
# 3: lightline lightline is uptodate.
# : which status line plugin to install?
statusline=lightline

# 
# : Manage ctags with vim-gutentags?
gutentags=y

# 
# : Fuzzy Tools?
fuzzy_tools=y

# unite.vim plug-in can search and display information from arbitrary sources
# like files, buffers, recently used files or registers. You can run several
# pre-defined actions on a target displayed in the unite window.
# 
# Using this plugin we can implement many of the functionalities usually provided
# by in other ways. e.g. we can use unite.vim to choose buffers, files, yank
# history, etc
# : configure unite.vim?
unite_vim=y

# CtrlP
# 
# Full path fuzzy file, buffer, mru, tag, ... finder with an intuitive interface.
# Written in pure Vimscript for MacVim, gVim and Vim version 7.0+. Has full
# support for Vim's |regexp| as search pattern, built-in MRU files monitoring,
# project's root finder, and more.
# : install ctrlP?
ctrl_p=n

# FZF
# 
# A command-line fuzzy finder written in Go + vim configuration.
# : use fzf?
use_fzf=y

# What plugin to use for fuzzy file search?:
# 
# Note: this only affect which of the options will be bound to '<leader>ff'
# Valid options:
# 1: fzf   - use ':Files' from FZF
# 2: unite - use ':Unite file_rec/async:!'
# : files search with?
fuzzy_files=fzf

# What plugin to use for fuzzy buffer switching?:
# 
# Note: this only affect which of the options will be bound to '<leader>bb'
# Valid options:
# 1: unite - use ":Unite buffer"
# 2: fzf   - use FZF ":Buffers"
# : buffer search with?
fuzzy_buffers=fzf

# Search for an entry in the current quickfix errors and jump to it.
# We can use several plugins for it:
# Note: 'osyo-manga/unite-quickfix' plugin will be installed if you choose 'unite' option.
# Valid options:
# 1: unite - use ':Unite quickfix'
# 2: fzf - use <Plug>fzf(quickfix)
# : quickfix search with?
fuzzy_quickfix=fzf

# Search using AG - The Silver Searcher
# https://github.com/ggreer/the_silver_searcher
# Valid options:
# 1: fzf      - use ":Ag" from FZF
# 2: vim-ag   - use ":Ag" from vim-ag plugin
# : Which AG to use?
ag=fzf

# Search through the lines in all loaded buffers
# Valid options:
# 1: fzf   - use ":Lines" from FZF
# : lines search with?
fuzzy_lines=fzf

# Tag search
# Valid options:
# 1: fzf   - use ":Tags" from FZF
# 2: unite - use ":Unite tags"
# : tags search with?
fuzzy_tags=fzf

# YankRing is better IMHO, but you might prefer a unified interface ;)
# Valid options:
# 1: yankring - use dedicated yankring plgin
# 2: unite -    use ":Unite history/yank"
# : yank history search with?
fuzzy_yank=yankring

# 
# : Plugins for developers?
development=y

# Code Autoformatting
# Valid options:
# 1: neoformat      - Neoformat
# 2: vim-autoformat - vim-autoformat
# 3: formatter      - formatter.nvim
# 4: -              - none
# : autoformat plugin?
autoformat=formatter

# Vim plugin, provides insert mode auto-completion for quotes, parens, brackets, etc.
# : Install delimitmate?
delimitmate=y

# 
# : Install EasyAlign plugin?
easy_align=y

# 
# : Install endwise?
endwise=y

# 
# : Syntax and Filetypes (languages) support
dev_lang=y

# 
# : Q/KDB+ support
qkdb=y

# 
# : Ruby/Rails support?
ruby=y

# Base16 color themes support
# : install base16 colorthemes support?
base16=y

# Vim can automatically load .vimrc (or .nvimrc in case of nvim) files in project directories.
# : Autoload .vimrc files in local directories?
load_local_vimrc=y

