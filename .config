# With this "on", every time you yank in vim it will be immediately available in
# the system clipboard, as if you did '"+y'.
# 
# I admit, it sounds like a terrific idea, I was all to tired to '"+yy' and
# stuff. But since I turned this on, I was having a different kind of problem.
# 
# Before the switch I'd copy something from a web page, and then do e.g.
# 'cib<Apple>V' to replace content of a block with whatever I copied.  Now it no
# longer works. As soon as you 'cib' the content of the block replaces your
# clipboard content, so you end up pasting it all back, duh! :)
# 
# And to add insult to the injury, whatever you copied is not on the yank ring history.
# 
# Oh, and basting blocks of text no longer work either.
# 
# So... I'm still trying to make use of this as I'm all to tired of '"+y', but I
# decided to make this configurable, as not everyone might want to invest the time
# to rewire muscle memory ;)
# : "merge" vim and system clipboards?
system_clipboard=y

# If your terminal is ISO-8613-3 compatible you can use gui colors, e.g.
# guilfg/guilbg of color themes instead of ctermbg/ctermfg.
# 
# You can check by running ":echo has('termguicolors')<CR>".
# 
# Answer No if you do not want to use gui colors even on a comnpatible terminal.
# : use terminal gui colors (on compatible terminals)?
set_termguicolors=y

# What plugin to use to visualize indentation level:
# Valid options:
# 1: guides - Indent-Guides
# 2: lines  - Yggdroot/indentLine
# 3: -      - none
# : indentation plugin?
visual_indent=-

# 
# : install NerdTree(and tools) and NerdCommenter?
nerdtools=y

# 
# : Install NerdTree?
nerdtree=y

# A plugin of NERDTree showing git status flags.
# : install nerdtree-git-plugin plugin?
nerdtree_git=y

# 
# : Install NerdTreeTabs?
nerdtree_tabs=y

# 
# : Sessions support?
session=y

# Statusline provider
# Valid options:
# 1: none 
# 2: airline 
# 3: lightline 
# : which status line plugin to install?
statusline=lightline

# switch.vim is a simple Vim plugin to switch segments of text with predefined replacements.
# 
# e.g. switch 'foo' with "foo" with :foo etc
# : Install switch.vim?
switch_vim=y

# 
# : VimWiki support?
vimwiki=y

# 
# : setup text & code completion?
code_completion=y

# 
# : code snippets support?
snippets=y

# vim-snippets plugin provides a library of snippets for many languages
# : install snippets library?
vim_snippets=y

# 
# : install supertab?
supertab=y

# What completion plugin to use?
# 
# > Note: if YouCompleteMe installation fails, try to running it manually with "make completion"
# Valid options:
# 1: deoplete use Deoplete
# 2: youcompleteme use YouCompleteMe
# : completion engine?
completion_engine=deoplete

# 
# : install vimscript source for deoplete?
neco_vim_completion=y

# 
# : allow completion from other tmux windows?
tmux_completion=y

# unite.vim plug-in can search and display information from arbitrary sources
# like files, buffers, recently used files or registers. You can run several
# pre-defined actions on a target displayed in the unite window.
# 
# Using this plugin we can implement many of the functionalities usually provided
# by in other ways. e.g. we can use unite.vim to choose buffers, files, yank
# history, etc
# : configure unite.vim?
unite_vim=y

# CtrlP
# 
# Full path fuzzy file, buffer, mru, tag, ... finder with an intuitive interface.
# Written in pure Vimscript for MacVim, gVim and Vim version 7.0+. Has full
# support for Vim's |regexp| as search pattern, built-in MRU files monitoring,
# project's root finder, and more.
# : install ctrlP?
ctrl_p=y

# Fzf
# 
# A command-line fuzzy finder written in Go + vim configuration.
# : use fzf?
use_fzf=y

# What plugin to use for fuzzy file search?:
# 
# Note: this only affect which of the options will be bound to '<leader>ff'
# Valid options:
# 1: fzf   - use ':Files' from FZF
# 2: unite - use ':Unite file_rec/async:!'
# 3: ctrlp - use ':CtrlP'
# : files search with?
fuzzy_files=fzf

# What plugin to use for fuzzy buffer switching?:
# 
# Note: this only affect which of the options will be bound to '<leader>bb'
# Valid options:
# 1: unite - use ":Unite buffer"
# 2: ctrlp - use ":CtrlPBuff"
# 3: fzf   - use FZF ":Buffers"
# : buffer search with?
fuzzy_buffers=unite

# Search for an entry in the current quickfix errors and jump to it.
# We can use several plugins for it:
# Note: 'osyo-manga/unite-quickfix' plugin will be installed if you choose 'unite' option.
# Valid options:
# 1: unite - use ':Unite quickfix'
# 2: ctrlp - use ':CtrlPQuickfix'
# : quickfix search with?
fuzzy_quickfix=ctrlp

# Search using AG - The Silver Searcher
# https://github.com/ggreer/the_silver_searcher
# Valid options:
# 1: fzf      - use ":Ag" from FZF
# 2: vim-ag   - use ":Ag" from vim-ag plugin
# : Which AG to use?
ag=fzf

# Search through the lines in all loaded buffers
# Valid options:
# 1: fzf   - use ":Lines" from FZF
# 2: ctrlp - use ":CtrlPLine"
# : lines search with?
fuzzy_lines=fzf

# Tag search
# Valid options:
# 1: fzf   - use ":Tags" from FZF
# 2: unite - use ":Unite tags"
# 3: ctrlp - use ":CtrlPTags"
# : tags search with?
fuzzy_tags=fzf

# YankRing is better IMHO, but you might prefer a unified interface ;)
# Valid options:
# 1: yankring - use dedicated yankring plgin
# 2: unite -    use ":Unite history/yank"
# : yank history search with?
fuzzy_yank=yankring

# 
# : Plugins for developers?
development=y

# Vim plugin, provides insert mode auto-completion for quotes, parens, brackets, etc.
# : Install delimitmate?
delimitmate=y

# 
# : Install EasyAlign plugin?
easy_align=y

# 
# : Use neoformat?
neoformat=y

# Syntax checking
# Valid options:
# 1: none        - NONE
# 2: ale         - https://github.com/w0rp/ale
# 3: syntastic   - https://github.com/scrooloose/syntastic
# : syntax checking library
linter=ale

# 
# : Manage ctags with vim-gutentags?
dev_tags=n

# 
# : Syntax and Filetypes (languages) support
dev_lang=y

# 
# : Q/KDB+ support
qkdb=y

# 
# : Ruby/Rails support?
ruby=y

