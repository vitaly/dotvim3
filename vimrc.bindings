
" src/plugins/20-settings/files/vimrc.bindings -------------------

call SetLeaderMenu('T',   'Toggle')

noremap <silent>                       <plug>(Toggle/Relative-Number) :set relativenumber!<cr>
nmap    <leader>Tr                     <plug>(Toggle/Relative-Number)

noremap <silent>                       <plug>(Toggle/Read-Only) :set ro!<cr>
nmap    <leader>TR                     <plug>(Toggle/Read-Only)

map     <plug>(Toggle/White-Space)       :set nolist!<CR>
nmap    <silent>                       <leader>Tw <plug>(Toggle/White-Space)

noremap <plug>(Toggle/Search-Highlight) :silent noh<CR>
nmap    <silent>                       <leader>Ts <plug>(Toggle/Search-Highlight)

set concealcursor=
fu! Toggle_concealcursor()
  if '' == &concealcursor
    set concealcursor=n
  else
    set concealcursor=
  endif
endfu

set conceallevel=2
fu! Toggle_conceallevel()
  if 0 == &conceallevel
    set conceallevel=2
  else
    set conceallevel=0
  endif
endfu

call SetLeaderMenu('T.c', 'Conceal')

noremap <plug>(Toggle/Conceal/Cursor)  :call Toggle_concealcursor()<cr>
nmap <leader>Tcc <plug>(Toggle/Conceal/Cursor)

noremap <plug>(Toggle/Conceal/Level)  :call Toggle_conceallevel()<cr>
nmap <leader>Tcl <plug>(Toggle/Conceal/Level)


" switch between 2 last buffers
noremap <plug>(Last-Buffer) :b#<CR>
nmap    <leader><Tab>       <plug>(Last-Buffer)

" Make shift-insert work like in Xterm
map  <S-Insert> <MiddleMouse>
map! <S-Insert> <MiddleMouse>

noremap <plug>(Next) :cn<CR>
nmap    <leader>n    <plug>(Next)

noremap <plug>(Prev) :cn<CR>
nmap    <leader>p    <plug>(Prev)

noremap <plug>diff-mode(toggle) :set diff!<cr>
nmap    <leader>TD              <plug>diff-mode(toggle)


" src/plugins/20-settings/plugins/clipboard/files/vimrc.bindings -------------------

fu! Toggle_clipboard()
  if g:clipboard_toggle_mode == &clipboard
    set clipboard=
  else
    let &clipboard=g:clipboard_toggle_mode
  endif
endfu

noremap                     <plug>(Toggle/Clipboard) :call Toggle_clipboard()<cr>
nmap    <silent> <leader>TC <plug>(Toggle/Clipboard)

" plugins/20-settings/plugins/clipboard/install.sh -------------------

let g:clipboard_toggle_mode='unnamed'
let &clipboard=g:clipboard_toggle_mode

" src/plugins/30-general/plugins/diminactive/files/vimrc.bindings -------------------

" 0 - disabled
" 1 - use syntax
" 2 - use colorcolumns
fu s:updateDiminactive()
  if g:diminactive_mode == 1

    let g:diminactive_use_colorcolumn = 0
    let g:diminactive_use_syntax = 1
    exe "DimInactiveOn"

  elseif g:diminactive_mode == 2

    let g:diminactive_use_colorcolumn = 1
    let g:diminactive_use_syntax = 0
    exe "DimInactiveOn"

  else

    let g:diminactive_use_colorcolumn = 0
    let g:diminactive_use_syntax = 0
    exe "DimInactiveOff"

  endif
endfu

if (!exists("g:diminactive_mode"))
  let g:diminactive_mode = 1
endif
call s:updateDiminactive()

" cycle 0, 1, 2
fu s:cycleDiminitive()

  let g:diminactive_mode = max([0, g:diminactive_mode + 1])
  echo g:diminactive_mode

  if g:diminactive_mode > 2
    let g:diminactive_mode = 0
  endif

  call s:updateDiminactive()
endfu

noremap              <plug>(Toggle/Diminactive) :call <SID>cycleDiminitive()<cr>
nmap     <leader>Td  <plug>(Toggle/Diminactive)

" src/plugins/30-general/plugins/leader-guide/files/vimrc.bindings -------------------


call SetLeaderMenu('v',         'Vim')

noremap                         <plug>(Vim/Redraw)                           :redraw!<cr>
nmap     <leader>vr             <plug>(Vim/Redraw)


call SetLeaderMenu('t',         'Tab')

noremap                         <plug>(Tab/New)                              :tabnew<cr>
nmap     <leader>tn             <plug>(Tab/New)

map                             <plug>(Tab/New-File)                         <plug>(Tab/New)<plug>fuzzy-file(find)
nmap     <leader>tf             <plug>(Tab/New-File)


call SetLeaderMenu('b',         'Buffer')

noremap                         <plug>(Buffer/Next)                          :bn<cr>
nmap     <leader>bn             <plug>(Buffer/Next)

noremap                         <plug>(Buffer/Prev)                          :bp<cr>
nmap     <leader>bp             <plug>(Buffer/Prev)

call SetLeaderMenu('f',         'File')

noremap                         <plug>(File/Save)                            :w<cr>
nmap     <leader>fs             <plug>(File/Save)

noremap                         <plug>(File/Save-All)                        :wa<cr>
nmap     <leader>fa             <plug>(File/Save-All)


call SetLeaderMenu('f.e',       'Edit')

noremap                         <plug>(File/Edit/.vim)                       :e ~/.vim/<cr>
nmap     <leader>fev            <plug>(File/Edit/.vim)

noremap                         <plug>(File/Edit/scratch.vim)                :e ~/.vim/scratch.vim<cr>
nmap     <leader>fes            <plug>(File/Edit/scratch.vim)

call SetLeaderMenu('f.e.l',     'Local')

noremap                         <plug>(File/Edit/Local/directory)            :e ~/.vim/local<cr>
nmap     <leader>fell           <plug>(File/Edit/Local/directory)

noremap                         <plug>(File/Edit/Local/vimrc.after)          :e ~/.vim/local/vimrc.after<cr>
nmap     <leader>fela           <plug>(File/Edit/Local/vimrc.after)
" used to this  alias ;)
nmap     <leader>fed            <plug>(File/Edit/Local/vimrc.after)

noremap                         <plug>(File/Edit/Local/vimrc.plugins)        :e ~/.vim/local/vimrc.plugins<cr>
nmap     <leader>felp           <plug>(File/Edit/Local/vimrc.plugins)

noremap                         <plug>(File/Edit/Local/vimrc.bindings)       :e ~/.vim/local/vimrc.bindings<cr>
nmap     <leader>felb           <plug>(File/Edit/Local/vimrc.bindings)

call SetLeaderMenu('q',         'Quit')

noremap                         <plug>(Quit/All)                             :qa<cr>
nmap     <leader>qq             <plug>(Quit/All)

call SetLeaderMenu('w',   'Window / Wiki' )
" call SetLeaderMenu('w',   ['Window', 'Wiki'])

noremap                         <plug>window(h-max)                          <C-w><bar>
nmap     <leader>w<bar>         <plug>window(h-max)

noremap                         <plug>window(v-max)                          <C-w>_
nmap     <leader>w_             <plug>window(v-max)

noremap                         <plug>windows-balance                        <C-w>=
nmap     <leader>w=             <plug>windows-balance

noremap                         <plug>windows-swap                           <C-w>x
nmap     <leader>wx             <plug>windows-swap

noremap                         <plug>window(maximize)                       <C-w>_<C-w><Bar>
nmap     <leader>wz             <plug>window(maximize)
nmap     <C-w>z                 <plug>window(maximize)

nmap                            <plug>window(move-up)                        <c-w>K
nmap     <leader>wK             <plug>window(move-up)

nmap                            <plug>window(move-down)                      <c-w>J
nmap     <leader>wJ             <plug>window(move-down)

nmap                            <plug>window(move-left)                      <c-w>H
nmap     <leader>wH             <plug>window(move-left)

nmap                            <plug>window(move-right)                     <c-w>L
nmap     <leader>wL             <plug>window(move-right)

noremap                         <plug>window(h-split)                        :split<cr><c-w>j
nmap     <leader>ws             <plug>window(h-split)
nmap     <leader>w-             <plug>window(h-split)

noremap                         <plug>window(v-split)                        :vsplit<cr><c-w>l
nmap     <leader>wv             <plug>window(v-split)
nmap     <leader>w<Bslash>      <plug>window(v-split)

noremap                         <plug>window(delete)                         :q<cr>
nmap     <leader>wd             <plug>window(delete)
nmap     <leader>wq             <plug>window(delete)
nmap     <leader>qw             <plug>window(delete)

noremap                         <plug>buffer(delete)                         :bd<cr>
nmap     <leader>bd             <plug>buffer(delete)

noremap                         <plug>window(only)                           <C-w>o
nmap     <leader>wm             <plug>window(only)

nnoremap <leader><space>   :

" src/plugins/30-general/plugins/nerdtools/plugins/nerdtree/plugins/20-nerdtree-tabs/files/vimrc.bindings -------------------

" nerdtree with tabs
" display the [F]ile browser [T]ree
noremap <plug>(Toggle/File-Tree) :NERDTreeTabsToggle<CR>

" show current file in the tree
noremap <plug>(Tree-Find-File) :NERDTreeFind<CR>

" src/plugins/30-general/plugins/nerdtools/plugins/nerdtree/plugins/99-common/files/vimrc.bindings -------------------

if maparg('<plug>(Toggle/File-Tree)') != ''
  nmap <leader>Tt  <plug>(Toggle/File-Tree)

  " alias in file menu
  map <plug>(File/Toggle/File-Tree)   <plug>(Toggle/File-Tree)
  nmap <leader>ftt <plug>(File/Toggle/File-Tree)
endif

if maparg('<plug>(Tree-Find-File)') != ''
  " show current file in the tree
  nmap <leader>0 <plug>(Tree-Find-File)
endif
" vim: ft=vim

" src/plugins/30-general/plugins/statusline/files/vimrc.bindings -------------------

if maparg('<plug>(Toggle/Status-Line)') != ''
  nmap <leader>TS  <plug>(Toggle/Status-Line)
endif
set noshowmode

" src/plugins/30-general/plugins/tmux-navigator/files/vimrc.bindings -------------------

noremap <plug>window(up)    :TmuxNavigateUp<CR>
nmap    <leader>wk          <plug>window(up)

noremap <plug>window(down)  :TmuxNavigateDown<CR>
nmap    <leader>wj          <plug>window(down)

noremap <plug>window(left)  :TmuxNavigateLeft<CR>
nmap    <leader>wh          <plug>window(left)

noremap <plug>window(right) :TmuxNavigateRight<CR>
nmap    <leader>wl          <plug>window(right)

if has("nvim")
  tnoremap <silent> <m-h> <C-\><C-n>:TmuxNavigateLeft<cr>
  tnoremap <silent> <m-j> <C-\><C-n>:TmuxNavigateDown<cr>
  tnoremap <silent> <m-k> <C-\><C-n>:TmuxNavigateUp<cr>
  tnoremap <silent> <m-l> <C-\><C-n>:TmuxNavigateRight<cr>
  tnoremap <silent> <m-\> <C-\><C-n>:TmuxNavigatePrevious<cr>
endif

" src/plugins/30-general/plugins/undotree/files/vimrc.bindings -------------------

noremap             <plug>(Toggle/Unfo-Tree) :UndotreeToggle<CR>
nmap    <leader>Tu  <plug>(Toggle/Unfo-Tree)

" alias for quick access
map                 <plug>(Toggle-Unfo-Tree) <plug>(Toggle/Unfo-Tree)
nmap <leader>u      <plug>(Toggle-Unfo-Tree)

nmap g= :later<cr>

" src/plugins/30-general/plugins/vim-sneak/files/vimrc.bindings -------------------

map f <Plug>Sneak_f
map F <Plug>Sneak_F
map t <Plug>Sneak_t
map T <Plug>Sneak_T

" src/plugins/30-general/plugins/zoomwintab/files/vimrc.bindings -------------------

noremap             <plug>window(zoom) :ZoomWinTabToggle<CR>
nmap     <leader>wo <plug>window(zoom)

" src/plugins/40-completion/engine/deoplete/files/vimrc.bindings -------------------

noremap                           <plug>lang(type-info) :call LanguageClient#textDocument_hover()<CR>
nmap    <silent>  <localleader>K  <plug>lang(type-info)

noremap                           <plug>lang(goto)      :call LanguageClient#textDocument_definition()<CR>
nmap    <silent>  <localleader>lg <plug>lang(goto)

noremap                           <plug>lang(rename)    :call LanguageClient#textDocument_rename()<CR>
nmap    <silent>  <localleader>lR <plug>lang(rename)

noremap                           <plug>lang(sym)       :call LanguageClient#textDocument_documentSymbol()<CR>
nmap    <silent>  <localleader>ls <plug>lang(sym)

noremap                           <plug>lang(refs)      :call LanguageClient#textDocument_references()<CR>
nmap    <silent>  <localleader>lr <plug>lang(refs)

noremap                           <plug>lang(actions)   :call LanguageClient#textDocument_codeAction()<CR>
nmap    <silent>  <localleader>la <plug>lang(actions)

noremap                           <plug>lang(menu)      :call LanguageClient_contextMenu()<CR>
nmap    <silent>  <localleader>lm <plug>lang(menu)


" src/plugins/50-fuzzy-tools/plugins/02-fzf/files/vimrc.bindings -------------------

command! -bar -bang IMaps call fzf#vim#maps("i", <bang>0)
command! -bar -bang OMaps call fzf#vim#maps("o", <bang>0)
command! -bar -bang VMaps call fzf#vim#maps("x", <bang>0)
command! -bar -bang CMaps call fzf#vim#maps("c", <bang>0)

nmap <leader>?  <plug>(fzf-maps-n)
xmap <leader>?  <plug>(fzf-maps-x)
omap <leader>?  <plug>(fzf-maps-o)
imap <c-x><tab> <plug>(fzf-maps-i)

" src/plugins/50-fuzzy-tools/plugins/10-fuzzy-files/fzf/vimrc.bindings -------------------

noremap <plug>fuzzy-file(find) :Files<cr>

" src/plugins/50-fuzzy-tools/plugins/10-fuzzy-files/common/vimrc.bindings -------------------

if maparg('<plug>fuzzy-file(find)') != ''
  nmap <leader>ff <plug>fuzzy-file(find)
  nmap ,,         <Plug>fuzzy-file(find)
endif

if maparg('<plug>fuzzy-file(no-cache)') != ''
  nmap <leader>fF <plug>fuzzy-file(no-cache)
endif

" src/plugins/50-fuzzy-tools/plugins/30-fuzzy-quickfix/files/vimrc.bindings -------------------

nmap <leader>sq <plug>(Search/Quickfix)

" src/plugins/50-fuzzy-tools/plugins/40-fuzzy-lines/fzf/vimrc.bindings -------------------

noremap              <plug>(Search/Lines)     :Lines<cr>
nmap     <leader>sl  <plug>(Search/Lines)

" src/plugins/50-fuzzy-tools/plugins/50-fuzzy-tags/files/vimrc.bindings -------------------

if maparg('<plug>(Search/Tags)') != ''
  nmap <leader>st  <plug>(Search/Tags)
endif
if maparg('<plug>(Search/Buffer/Tags)') != ''
  nmap <leader>sbt <plug>(Search/Buffer/Tags)
endif

" src/plugins/50-fuzzy-tools/plugins/60-fuzzy-yank/yankring/vimrc.bindings -------------------

noremap                         <plug>(Search/YankRing)                              :YRShow<cr>
nmap     <leader>sy             <plug>(Search/YankRing)

" src/plugins/70-languages/plugins/rails/files/vimrc.bindings -------------------

" FIXME: can we make this active only in a Ruby ftype?

:nnoremap <localleader>rap  :RAddParameter<cr>
:nnoremap <localleader>rcpc :RConvertPostConditional<cr>
:nnoremap <localleader>rel  :RExtractLet<cr>
:vnoremap <localleader>rec  :RExtractConstant<cr>
:vnoremap <localleader>relv :RExtractLocalVariable<cr>
:nnoremap <localleader>rit  :RInlineTemp<cr>
:vnoremap <localleader>rrlv :RRenameLocalVariable<cr>
:vnoremap <localleader>rriv :RRenameInstanceVariable<cr>
:vnoremap <localleader>rem  :RExtractMethod<cr>

let g:local_leader_map_guide.r     = { 'name': 'Ruby Refactoring' }
let g:local_leader_map_guide.r.a   = { 'name': 'Add' }
let g:local_leader_map_guide.r.c   = { 'name': 'Convert' }
let g:local_leader_map_guide.r.c.p = { 'name': 'Post' }
let g:local_leader_map_guide.r.e   = { 'name': 'Extract' }
let g:local_leader_map_guide.r.i   = { 'name': 'Inline' }
let g:local_leader_map_guide.r.r   = { 'name': 'Rename' }
let g:local_leader_map_guide.r.r.l = { 'name': 'Local' }
let g:local_leader_map_guide.r.r.i = { 'name': 'Instance' }

" src/plugins/80-base16/files/vimrc.bindings -------------------

" including in vimrc.bindings to setup colors early, and
" allow other plugins to override in vimrc.after
if filereadable(expand("~/.vimrc_background"))
  let base16colorspace=256
  source ~/.vimrc_background
endif

" src/plugins/99-final/plugins/10-local-configs/files/vimrc.bindings -------------------

source ~/.vim/local/vimrc.bindings
