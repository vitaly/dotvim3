
" src/plugins/10-init/files/vimrc.plugins -------------------

scriptencoding utf8

Plug 'junegunn/vim-plug'
Plug 'Shougo/vimproc.vim', {'do' : 'make'}
Plug 'Shougo/unite.vim'

" src/plugins/20-settings/files/vimrc.plugins -------------------

Plug 'tpope/vim-sensible'

let mapleader = " "
let maplocalleader = ","
set timeoutlen=5000

" src/plugins/30-general/plugins/diminactive/files/vimrc.plugins -------------------

Plug 'blueyed/vim-diminactive'

" src/plugins/30-general/plugins/diminactive/mode/off/vimrc.plugins -------------------

let g:diminactive_mode = 0

" src/plugins/30-general/plugins/greplace/files/vimrc.plugins -------------------

Plug 'vim-scripts/greplace.vim', { 'on': ['Gsearch', 'Gbuffersearch'] }

" src/plugins/30-general/plugins/leader-guide/files/vimrc.plugins -------------------

Plug 'hecal3/vim-leader-guide'

let g:leader_map_guide = {}
let g:local_leader_map_guide = {}

function! SetMenuMap(map, keys, name)
  let s:map = a:map
  for s:key in split(a:keys, '\.')
    if !has_key(s:map, s:key)
      let s:map[s:key] = {}
    endif
    let s:map = s:map[s:key]
  endfor
  let s:map['name'] = a:name . '..'
endfunction

function! SetLeaderMenu(keys, name)
  call SetMenuMap(g:leader_map_guide, a:keys, a:name)
endfunction

function! SetLocalLeaderMenu(keys, name)
  call SetMenuMap(g:local_leader_map_guide, a:keys, a:name)
endfunction

call SetLeaderMenu('a',   'App'           )
call SetLeaderMenu('c',   'Comment'       )
call SetLeaderMenu('f.t', 'Toggle'        )
call SetLeaderMenu('s',   'Search'        )
call SetLeaderMenu('s.b', 'Buffer'        )
call SetLeaderMenu('S',   'Session'       )
call SetLeaderMenu('x',   'Text'          )
call SetLeaderMenu('x.d', 'Delete'        )

call SetLocalLeaderMenu('e', 'Eval')
call SetLocalLeaderMenu('l', 'Language')

" src/plugins/30-general/plugins/multiple-cursors/files/vimrc.plugins -------------------

Plug 'terryma/vim-multiple-cursors'

" src/plugins/30-general/plugins/nerdtools/plugins/nerdtree/plugins/10-nerdtree-git/files/vimrc.plugins -------------------

Plug 'Xuyuanp/nerdtree-git-plugin'

" src/plugins/30-general/plugins/nerdtools/plugins/nerdtree/plugins/20-nerdtree-tabs/files/vimrc.plugins -------------------

Plug 'jistr/vim-nerdtree-tabs'

" src/plugins/30-general/plugins/nerdtools/plugins/nerdtree/plugins/99-common/files/vimrc.plugins -------------------

Plug 'scrooloose/nerdtree'

" Tells the NERD tree to respect 'wildignore'.
let NERDTreeRespectWildIgnore=1
let NERDTreeCascadeSingleChildDir=0

let g:NERDTreeHijackNetrw = 1
let g:NERDTreeQuitOnOpen = 1

" src/plugins/30-general/plugins/nerdtools/plugins/netdcommenter/files/vimrc.plugins -------------------

Plug 'scrooloose/nerdcommenter'

let g:NERDDefaultAlign = 'left'
let g:NERDSpaceDelims = 1

" invert comment on the current line/selection
map <plug>comment(invert) <Plug>NERDCommenterInvert
nmap <leader>; <plug>comment(invert)
vmap <leader>; <plug>comment(invert)

" src/plugins/30-general/plugins/repeat/files/vimrc.plugins -------------------

" replacement for the repeat mapping (.) to support plugins
Plug 'tpope/vim-repeat'

" src/plugins/30-general/plugins/statusline/lightline/files/vimrc.plugins -------------------

Plug 'itchyny/lightline.vim'
noremap <silent> <plug>(Toggle/Status-Line) :call lightline#toggle()<cr>
let g:status_line_plugin = 'lightline'

" src/plugins/30-general/plugins/switch/files/vimrc.plugins -------------------

Plug 'AndrewRadev/switch.vim'

" making some of the switches defined for ruby work in HAML files
autocmd FileType haml let b:switch_definitions =
      \ [
      \   g:switch_builtins.ruby_hash_style,
      \   g:switch_builtins.ruby_string,
      \   g:switch_builtins.true_false,
      \   g:switch_builtins.true_false,
      \ ]

nnoremap ` :Switch<cr>

" src/plugins/30-general/plugins/tmux-navigator/files/vimrc.plugins -------------------

Plug 'vitaly/vim-tmux-navigator'

" src/plugins/30-general/plugins/undotree/files/vimrc.plugins -------------------

Plug 'mbbill/undotree'

nmap <leader>u :UndotreeToggle<CR>
"g:undotree_SetFocusWhenToggle
nmap g= :later<cr>

" src/plugins/30-general/plugins/utl/files/vimrc.plugins -------------------

Plug 'vim-scripts/utl.vim'

if has("mac")
  let g:utl_cfg_hdl_scm_http_system = "!open '%u'"
end

" src/plugins/30-general/plugins/vim-sneak/files/vimrc.plugins -------------------

Plug 'justinmk/vim-sneak'

" src/plugins/30-general/plugins/vimwiki/files/vimrc.plugins -------------------

Plug 'vimwiki/vimwiki', { 'branch': 'dev' }
let g:vimwiki_folding = "list"

Plug 'tbabej/taskwiki'
let g:taskwiki_disable_concealcursor = 1

let g:no_cecutil_maps = 1
Plug 'powerman/vim-plugin-AnsiEsc'
Plug 'blindFS/vim-taskwarrior'

" src/plugins/30-general/plugins/xterm-color-table/files/vimrc.plugins -------------------

Plug 'guns/xterm-color-table.vim'

" src/plugins/30-general/plugins/zoomwintab/files/vimrc.plugins -------------------

Plug 'troydm/zoomwintab.vim'

" src/plugins/40-completion/plugins/snippets/files/vimrc.plugins -------------------

Plug 'SirVer/ultisnips'

" better key bindings for UltiSnipsExpandTrigger
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsJumpBackwardTrigger="<s-tab>"

" src/plugins/40-completion/plugins/snippets/plugins/vim-snippets/files/vimrc.plugins -------------------

Plug 'honza/vim-snippets'


" src/plugins/40-completion/plugins/supertab/files/vimrc.plugins -------------------

Plug 'ervandew/supertab'

let g:SuperTabDefaultCompletionType = '<C-n>'

" src/plugins/40-completion/engine/deoplete/files/vimrc.plugins -------------------

if has('nvim')
  Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
else
  Plug 'roxma/nvim-yarp'
  Plug 'roxma/vim-hug-neovim-rpc'
  Plug 'Shougo/deoplete.nvim'
endif
Plug 'Shougo/context_filetype.vim'

let g:deoplete#enable_at_startup = 1
let g:deoplete#enable_smart_case = 1

Plug 'autozimu/LanguageClient-neovim', {
      \ 'branch': 'next',
      \ 'do': 'bash install.sh',
      \ }
let g:LanguageClient_diagnosticsList = "Location"
let g:LanguageClient_serverCommands = {
    \ 'rust': ['rustup', 'run', 'stable', 'rls'],
    \ 'javascript': ['javascript-typescript-stdio'],
    \ 'javascript.jsx': ['javascript-typescript-stdio'],
    \ }

" Always draw sign column. Prevent buffer moving when adding/deleting sign.
set signcolumn=yes

" let g:LanguageClient_loggingLevel = 'INFO'
" let g:LanguageClient_loggingFile =  expand('~/tmp/nvim/LanguageClient.log')
" let g:LanguageClient_serverStderr = expand('~/tmp/nvim/LanguageServer.log')

" src/plugins/40-completion/engine/deoplete/plugins/neco-vim/files/vimrc.plugins -------------------

" https://github.com/Shougo/neco-vim
Plug 'Shougo/neco-vim'

" src/plugins/40-completion/engine/deoplete/plugins/ruby-solargraph/files/vimrc.plugins -------------------

" let g:LanguageClient_serverCommands['ruby'] = ['tcp://localhost:7658']
let g:LanguageClient_serverCommands['ruby'] = ['solargraph', 'stdio']

let g:LanguageClient_autoStop = 0

" src/plugins/40-completion/engine/deoplete/plugins/tmux-complete/files/vimrc.plugins -------------------

Plug 'wellle/tmux-complete.vim'

" src/plugins/50-fuzzy-tools/plugins/00-unite/files/vimrc.plugins -------------------

Plug 'Shougo/unite-outline'
Plug 'Shougo/neoyank.vim'
Plug 'Shougo/neomru.vim'
Plug 'tsukkee/unite-tag'

if executable('ag')
  let g:unite_source_rec_async_command = ['ag', '--follow', '--nocolor', '--nogroup', '-g', '']
endif

noremap <plug>show(outline) :Unite -start-insert -no-split -buffer-name=Outline outline<cr>
nmap <leader>O <plug>show(outline)

" src/plugins/50-fuzzy-tools/plugins/00-unite/plugins/10-unite-colorscheme/files/vimrc.plugins -------------------

Plug 'ujihisa/unite-colorscheme'

command! THEME Unite -start-insert -auto-preview colorscheme

" src/plugins/50-fuzzy-tools/plugins/02-fzf/files/vimrc.plugins -------------------

Plug 'junegunn/fzf.vim'

if executable("ag") && ('' == $FZF_DEFAULT_COMMAND)
  let $FZF_DEFAULT_COMMAND = "ag --follow --nocolor --nogroup -g ''"
endif

" plugins/50-fuzzy-tools/plugins/02-fzf/install.sh -------------------

set rtp+=/usr/local/opt/fzf

" src/plugins/50-fuzzy-tools/plugins/20-fuzzy-buffers/files/vimrc.plugins -------------------

nmap <leader>bb <plug>fuzzy(buffer)

" src/plugins/50-fuzzy-tools/plugins/20-fuzzy-buffers/unite/vimrc.plugins -------------------

noremap <plug>fuzzy(buffer) :Unite -start-insert -no-split -buffer-name=buffer buffer<cr>

" src/plugins/50-fuzzy-tools/plugins/30-fuzzy-quickfix/fzf/vimrc.plugins -------------------

Plug 'fszymanski/fzf-quickfix', {'on': '<Plug>(fzf-quickfix)'}
nmap <plug>(Search/Quickfix) <plug>(fzf-quickfix)

" src/plugins/50-fuzzy-tools/plugins/40-ag/files/vimrc.plugins -------------------

" smart search
"
noremap <plug>search(ag) :Ag<CR>
map <plug>(Smart-Search) <plug>search(ag)
nmap <leader>/ <plug>(Smart-Search)

" src/plugins/50-fuzzy-tools/plugins/50-fuzzy-tags/fzf/vimrc.plugins -------------------

map <plug>(Search/Tags) :Tags<cr>
map <plug>(Search/Buffer/Tags) :BTags<cr>

" src/plugins/50-fuzzy-tools/plugins/60-fuzzy-yank/yankring/vimrc.plugins -------------------

Plug 'vim-scripts/YankRing.vim'

" put the yankring_history file in ~/.backup
let g:yankring_history_dir = expand('~/.backup')

let g:yankring_max_history = 1000

let g:yankring_window_height = 20

let g:yankring_replace_n_pkey = '<leader>['
let g:yankring_replace_n_nkey = '<leader>]'

" src/plugins/60-development/plugins/delimitmate/files/vimrc.plugins -------------------

Plug 'Raimondi/delimitMate'

" Turns on/off the expansion of <Space>
let g:delimitMate_expand_space = 1

" Turns on/off the expansion of <CR>
let g:delimitMate_expand_cr = 1

" src/plugins/60-development/plugins/easy-align/files/vimrc.plugins -------------------

Plug 'junegunn/vim-easy-align'

" Start interactive EasyAlign in visual mode (e.g. vip<Enter>)
vmap <Enter> <Plug>(LiveEasyAlign)

" src/plugins/60-development/plugins/editorconfig/files/vimrc.plugins -------------------

Plug 'editorconfig/editorconfig-vim'

" src/plugins/60-development/plugins/endwise/files/vimrc.plugins -------------------

" end certain structures automatically, e.g. begin/end etc.
Plug 'tpope/vim-endwise'

" src/plugins/60-development/plugins/fugitive/files/vimrc.plugins -------------------

Plug 'tpope/vim-fugitive'
Plug 'vim-scripts/Merginal'
Plug 'tpope/vim-rhubarb'

let g:leader_map_guide.g  = { 'name': 'Git' }

" [G]it [G]grep
noremap <plug>git(grep) :silent Ggrep<space>
nmap <leader>gg <plug>git(grep)

" [G]rep [W]ord
" for global git search for word under the cursor (with highlight)
noremap <plug>git(grep-word) :let @/="\\<<C-R><C-W>\\>"<CR>:set hls<CR>:silent Ggrep -w "<C-R><C-W>"<CR>:ccl<CR>:cw<CR><CR>
nmap <leader>gw <plug>git(grep-word)

" [G]rep current selection in visual mode
noremap <plug>git(grep-selection) y:let @/=escape(@", '\\[]$^*.')<CR>:set hls<CR>:silent Ggrep -F "<C-R>=escape(@", '\\"#')<CR>"<CR>:ccl<CR>:cw<CR><CR>
vmap <leader>g <plug>git(grep-selection)

noremap <plug>git(status) :Gstatus<CR>
nmap <leader>gs  <plug>git(status)

noremap <plug>git(diff) :Gdiff<CR>
nmap <leader>gd  <plug>git(diff)

" src/plugins/60-development/plugins/git-gutter/files/vimrc.plugins -------------------

Plug 'airblade/vim-gitgutter'

" src/plugins/60-development/plugins/gitignore/files/vimrc.plugins -------------------

" hide .gitignore-d files from vim
Plug 'vitaly/vim-gitignore'

" src/plugins/60-development/plugins/neoformat/files/vimrc.plugins -------------------

Plug 'sbdchd/neoformat'

command! AutoFormat au BufWritePre <buffer> Neoformat
command! NoAutoFormat au! BufWritePre <buffer>

" src/plugins/60-development/plugins/surround/files/vimrc.plugins -------------------

Plug 'tpope/vim-surround'

" src/plugins/60-development/plugins/syntastic/ale/files/vimrc.plugins -------------------

Plug 'w0rp/ale'

if exists('g:status_line_plugin') && 'lightline' == g:status_line_plugin
  Plug 'maximbaz/lightline-ale'
endif

let g:ale_fixers = { 'ruby': [ 'rubocop' ] }

" src/plugins/60-development/plugins/tags/files/vimrc.plugins -------------------

Plug 'ludovicchabant/vim-gutentags'

" src/plugins/70-languages/plugins/0-polyglot/files/vimrc.plugins -------------------

Plug 'sheerun/vim-polyglot'

" src/plugins/70-languages/plugins/q/files/vimrc.plugins -------------------

Plug 'vitaly/vim-qkdb-syntax', { 'for': 'q' }

function! s:qModeSetup()
  let b:delimitMate_quotes = '"'
  if !&diff
    set foldmethod=indent
  endif
endfunction
augroup qmodesetup
  au!
  au FileType q call s:qModeSetup()
augroup END

" src/plugins/70-languages/plugins/rails/files/vimrc.plugins -------------------

" Rails support
Plug 'tpope/vim-rails', {'for': 'ruby'}

" apidock.com docs integration
Plug 'vitaly/apidock.vim', {'for': 'ruby'}

" lightweight Rspec runner for Vim
Plug 'thoughtbot/vim-rspec', {'for': 'ruby'}

map <plug>rspec(nearest) :call RunNearestSpec()<CR>
" map <localleader>r <plug>rspec(nearest)

" Rails i18n extraction plugin
Plug 'stefanoverna/vim-i18n', {'for': 'ruby'}

let g:ruby_refactoring_map_keys=0
Plug 'ecomba/vim-ruby-refactoring', {'for': 'ruby'}


" src/plugins/70-languages/plugins/tasks/files/vimrc.plugins -------------------

Plug 'irrationalistic/vim-tasks'

autocmd BufNewFile,BufReadPost todo set filetype=tasks

" src/plugins/80-base16/files/vimrc.plugins -------------------

Plug 'chriskempson/base16-vim'

" src/plugins/99-final/plugins/10-local-configs/files/vimrc.plugins -------------------

source ~/.vim/local/vimrc.plugins
