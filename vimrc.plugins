
" src/plugins/10-init/files/vimrc.plugins -------------------

scriptencoding utf8

Plug 'junegunn/vim-plug'
Plug 'Shougo/vimproc.vim', {'do' : 'make'}
Plug 'Shougo/unite.vim'

" src/plugins/20-settings/files/vimrc.plugins -------------------

Plug 'tpope/vim-sensible'

let mapleader = " "
let maplocalleader = ","
set timeoutlen=5000

" src/plugins/20-settings/plugins/leader-guide/files/vimrc.plugins -------------------

Plug 'hecal3/vim-leader-guide'

let g:leader_map_guide = {}
let g:local_leader_map_guide = {}

function! s:SetMenuMap(map, keys, name)
  let s:map = a:map
  for s:key in split(a:keys, '\.')
    if !has_key(s:map, s:key)
      let s:map[s:key] = {}
    endif
    let s:map = s:map[s:key]
  endfor
  let s:map['name'] = a:name . '..'
endfunction

function! SetLeaderMenu(keys, name)
  call s:SetMenuMap(g:leader_map_guide, a:keys, a:name)
endfunction

function! SetLocalLeaderMenu(keys, name)
  call s:SetMenuMap(g:local_leader_map_guide, a:keys, a:name)
endfunction

call SetLeaderMenu('a',   'App'           )
call SetLeaderMenu('f.t', 'Toggle'        )

" src/plugins/30-general/plugins/diminactive/files/vimrc.plugins -------------------

Plug 'blueyed/vim-diminactive'

" src/plugins/30-general/plugins/diminactive/mode/off/vimrc.plugins -------------------

let g:diminactive_mode = 0

" src/plugins/30-general/plugins/greplace/files/vimrc.plugins -------------------

Plug 'vim-scripts/greplace.vim', { 'on': ['Gsearch', 'Gbuffersearch'] }

" src/plugins/30-general/plugins/multiple-cursors/files/vimrc.plugins -------------------

Plug 'terryma/vim-multiple-cursors'

" src/plugins/30-general/plugins/nerdtools/plugins/nerdtree/plugins/10-nerdtree-git/files/vimrc.plugins -------------------

Plug 'Xuyuanp/nerdtree-git-plugin'

" src/plugins/30-general/plugins/nerdtools/plugins/nerdtree/plugins/20-nerdtree-tabs/files/vimrc.plugins -------------------

Plug 'jistr/vim-nerdtree-tabs'

" src/plugins/30-general/plugins/nerdtools/plugins/nerdtree/plugins/99-common/files/vimrc.plugins -------------------

Plug 'scrooloose/nerdtree'

" Tells the NERD tree to respect 'wildignore'.
let NERDTreeRespectWildIgnore=1
let NERDTreeCascadeSingleChildDir=0

let g:NERDTreeHijackNetrw = 1
let g:NERDTreeQuitOnOpen = 1

" src/plugins/30-general/plugins/nerdtools/plugins/netdcommenter/files/vimrc.plugins -------------------

Plug 'scrooloose/nerdcommenter'

let g:NERDDefaultAlign = 'left'
let g:NERDSpaceDelims = 1

" src/plugins/30-general/plugins/repeat/files/vimrc.plugins -------------------

" replacement for the repeat mapping (.) to support plugins
Plug 'tpope/vim-repeat'

" src/plugins/30-general/plugins/switch/files/vimrc.plugins -------------------

Plug 'AndrewRadev/switch.vim'

" making some of the switches defined for ruby work in HAML files
autocmd FileType haml let b:switch_definitions =
      \ [
      \   g:switch_builtins.ruby_hash_style,
      \   g:switch_builtins.ruby_string,
      \   g:switch_builtins.true_false,
      \   g:switch_builtins.true_false,
      \ ]

nnoremap ` :Switch<cr>

" src/plugins/30-general/plugins/tmux-navigator/files/vimrc.plugins -------------------

Plug 'vitaly/vim-tmux-navigator'

" src/plugins/30-general/plugins/undotree/files/vimrc.plugins -------------------

Plug 'mbbill/undotree'

let g:undotree_SetFocusWhenToggle = 1

" src/plugins/30-general/plugins/utl/files/vimrc.plugins -------------------

Plug 'vim-scripts/utl.vim'

if has("mac")
  let g:utl_cfg_hdl_scm_http_system = "!open '%u'"
end

" src/plugins/30-general/plugins/vim-sneak/files/vimrc.plugins -------------------

Plug 'justinmk/vim-sneak'

" src/plugins/30-general/plugins/vimwiki/files/vimrc.plugins -------------------

Plug 'vimwiki/vimwiki', { 'branch': 'dev' }
let g:vimwiki_folding = "list"
let g:vimwiki_map_prefix = '<leader>W'

let g:taskwiki_maplocalleader = ",t"
let g:taskwiki_disable_concealcursor = 1
Plug 'tbabej/taskwiki'

let g:no_cecutil_maps = 1
Plug 'powerman/vim-plugin-AnsiEsc'
Plug 'blindFS/vim-taskwarrior'

" src/plugins/30-general/plugins/xterm-color-table/files/vimrc.plugins -------------------

Plug 'guns/xterm-color-table.vim'

" src/plugins/30-general/plugins/zoomwintab/files/vimrc.plugins -------------------

Plug 'troydm/zoomwintab.vim'

" src/plugins/40-ide/plugins/00-snippets/files/vimrc.plugins -------------------

Plug 'honza/vim-snippets'

" src/plugins/40-ide/plugins/10-completion/engine/coc/files/vimrc.plugins -------------------

Plug 'Shougo/neco-vim'
Plug 'neoclide/coc-neco'

let g:coc_status_error_sign = "âœ—"
let g:coc_status_warning_sign = "!"

" Install nightly build, replace ./install.sh with install.cmd on windows
" Plug 'neoclide/coc.nvim', {'do': './install.sh nightly'}
" Or install latest release tag
Plug 'neoclide/coc.nvim', {'tag': '*', 'do': './install.sh'}
" Or build from source code
" Plug 'neoclide/coc.nvim', {'do': 'yarn install --frozen-lockfile'}

" src/plugins/40-ide/plugins/fugitive/files/vimrc.plugins -------------------

Plug 'tpope/vim-fugitive'
Plug 'vim-scripts/Merginal'
Plug 'tpope/vim-rhubarb'

" src/plugins/40-ide/plugins/linting/files/vimrc.plugins -------------------

Plug 'w0rp/ale'

let g:ale_fixers = { 'ruby': [ 'rubocop' ] }
let g:ale_sign_column_always = 1
let g:ale_set_balloons = 1
let g:ale_change_sign_column_color = 0

" src/plugins/40-ide/plugins/statusline/lightline/files/vimrc.plugins -------------------

Plug 'itchyny/lightline.vim'
Plug 'maximbaz/lightline-ale'
noremap <silent> <plug>(Toggle/Status-Line) :call lightline#toggle()<cr>
let g:status_line_plugin = 'lightline'

runtime status/lightline.vim

" src/plugins/40-ide/plugins/tags/files/vimrc.plugins -------------------

let g:gutentags_define_advanced_commands = 1
let g:gutentags_generate_on_new = 0
let g:gutentags_generate_on_missing = 0
let g:gutentags_trace = 0
Plug 'ludovicchabant/vim-gutentags'

" src/plugins/50-fuzzy-tools/plugins/00-unite/files/vimrc.plugins -------------------

Plug 'Shougo/unite-outline'
Plug 'Shougo/neoyank.vim'
Plug 'Shougo/neomru.vim'
Plug 'tsukkee/unite-tag'

if executable('ag')
  let g:unite_source_rec_async_command = ['ag', '--follow', '--nocolor', '--nogroup', '-g', '']
endif

noremap             <plug>(Show-Outline) :Unite -start-insert -no-split -buffer-name=Outline outline<cr>
nmap    <leader>O   <plug>(Show-Outline)

" src/plugins/50-fuzzy-tools/plugins/00-unite/plugins/10-unite-colorscheme/files/vimrc.plugins -------------------

Plug 'ujihisa/unite-colorscheme'

command! THEME Unite -start-insert -auto-preview colorscheme

" src/plugins/50-fuzzy-tools/plugins/02-fzf/files/vimrc.plugins -------------------

Plug 'junegunn/fzf.vim'

if executable("ag") && ('' == $FZF_DEFAULT_COMMAND)
  let $FZF_DEFAULT_COMMAND = "ag --follow --nocolor --nogroup -g ''"
endif

" plugins/50-fuzzy-tools/plugins/02-fzf/install.sh -------------------

set rtp+=/usr/local/opt/fzf

" src/plugins/50-fuzzy-tools/plugins/20-fuzzy-buffers/files/vimrc.plugins -------------------

nmap <leader>bb <plug>fuzzy(buffer)

" src/plugins/50-fuzzy-tools/plugins/20-fuzzy-buffers/unite/vimrc.plugins -------------------

noremap <plug>fuzzy(buffer) :Unite -start-insert -no-split -buffer-name=buffer buffer<cr>

" src/plugins/50-fuzzy-tools/plugins/30-fuzzy-quickfix/fzf/vimrc.plugins -------------------

Plug 'fszymanski/fzf-quickfix', {'on': '<Plug>(fzf-quickfix)'}
nmap <plug>(Search/Quickfix) <plug>(fzf-quickfix)

" src/plugins/50-fuzzy-tools/plugins/40-ag/files/vimrc.plugins -------------------

" smart search
"
noremap <plug>search(ag)     :Ag<CR>
map                          <plug>(Smart-Search) <plug>search(ag)
nmap    <leader>/            <plug>(Smart-Search)

" src/plugins/50-fuzzy-tools/plugins/50-fuzzy-tags/fzf/vimrc.plugins -------------------

map <plug>(Search/Tags) :Tags<cr>
map <plug>(Search/Buffer/Tags) :BTags<cr>

" src/plugins/50-fuzzy-tools/plugins/60-fuzzy-yank/yankring/vimrc.plugins -------------------

Plug 'vim-scripts/YankRing.vim'

" put the yankring_history file in ~/.backup
let g:yankring_history_dir = expand('~/.backup')

let g:yankring_max_history = 1000

let g:yankring_window_height = 20

let g:yankring_replace_n_pkey = '<leader>['
let g:yankring_replace_n_nkey = '<leader>]'

" src/plugins/60-development/plugins/delimitmate/files/vimrc.plugins -------------------

Plug 'Raimondi/delimitMate'

" Turns on/off the expansion of <Space>
let g:delimitMate_expand_space = 1

" Turns on/off the expansion of <CR>
let g:delimitMate_expand_cr = 1

" src/plugins/60-development/plugins/easy-align/files/vimrc.plugins -------------------

Plug 'junegunn/vim-easy-align'

" Start interactive EasyAlign in visual mode (e.g. vip<Enter>)
vmap <Enter> <Plug>(LiveEasyAlign)

" src/plugins/60-development/plugins/editorconfig/files/vimrc.plugins -------------------

Plug 'editorconfig/editorconfig-vim'

" src/plugins/60-development/plugins/endwise/files/vimrc.plugins -------------------

" end certain structures automatically, e.g. begin/end etc.
Plug 'tpope/vim-endwise'

" src/plugins/60-development/plugins/gitignore/files/vimrc.plugins -------------------

" hide .gitignore-d files from vim
Plug 'vitaly/vim-gitignore'

" src/plugins/60-development/plugins/neoformat/files/vimrc.plugins -------------------

Plug 'sbdchd/neoformat'

command! AutoFormat au BufWritePre <buffer> Neoformat
command! NoAutoFormat au! BufWritePre <buffer>

" src/plugins/60-development/plugins/surround/files/vimrc.plugins -------------------

Plug 'tpope/vim-surround'

" src/plugins/70-languages/plugins/0-polyglot/files/vimrc.plugins -------------------

let g:jsx_ext_required = 1
Plug 'sheerun/vim-polyglot'

" src/plugins/70-languages/plugins/q/files/vimrc.plugins -------------------

Plug 'vitaly/vim-qkdb-syntax', { 'for': 'q' }

function! s:qModeSetup()
  let b:delimitMate_quotes = '"'
  if !&diff
    set foldmethod=indent
  endif
endfunction
augroup qmodesetup
  au!
  au FileType q call s:qModeSetup()
augroup END

" src/plugins/70-languages/plugins/rails/files/vimrc.plugins -------------------

" Rails support
Plug 'tpope/vim-rails', {'for': 'ruby'}

" apidock.com docs integration
Plug 'vitaly/apidock.vim', {'for': 'ruby'}

" lightweight Rspec runner for Vim
Plug 'thoughtbot/vim-rspec', {'for': 'ruby'}

map <plug>rspec(nearest) :call RunNearestSpec()<CR>
" map <localleader>r <plug>rspec(nearest)

" Rails i18n extraction plugin
Plug 'stefanoverna/vim-i18n', {'for': 'ruby'}

let g:ruby_refactoring_map_keys=0
Plug 'ecomba/vim-ruby-refactoring', {'for': 'ruby'}


" src/plugins/80-base16/files/vimrc.plugins -------------------

Plug 'chriskempson/base16-vim'

" src/plugins/99-final/plugins/10-local-configs/files/vimrc.plugins -------------------

source ~/.vim/local/vimrc.plugins
