let g:coc_snippet_next = '<TAB>'
let g:coc_snippet_prev = '<S-TAB>'

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" xmap <tab> <Plug>(coc-snippets-select)
" inoremap <silent><expr> <TAB>
"       \ pumvisible() ? coc#_select_confirm() :
"       \ coc#expandableOrJumpable() ? "\<C-r>=coc#rpc#request('doKeymap', ['snippets-expand-jump',''])\<CR>" :
"       \ <SID>check_back_space() ? "\<TAB>" :
"       \ coc#refresh()
" inoremap <expr> <Tab>   pumvisible() ? "\<C-n>"      : "\<Tab>"
" inoremap <expr> <Tab>   pumvisible() ? "\<Down>"     : "\<Tab>"
" inoremap <silent><expr> <TAB>
"       \ pumvisible() ? "\<Down>" :
"       \ <SID>check_back_space() ? "\<TAB>" :
"       \ coc#refresh()
inoremap <silent><expr> <TAB>
      \ pumvisible() ? coc#_select_confirm() :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()

" inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<Up>"         : "\<S-Tab>"

" for some reason we have a buffer local imap for CR at this point
" and maparg below returns it
" but it is incomplete, the global map has more it in, so it get's lost
iunmap <buffer><cr>

" inoremap <expr> <Plug>(CustomCocCR) pumvisible() ? coc#_select_confirm() : "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"
" inoremap <expr> <Plug>(CustomCocCR) pumvisible() ? "" : "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"
inoremap <expr> <Plug>(CustomCocCR) pumvisible() ? "" : "\<C-g>u\<c-r>=coc#on_enter()\<CR>"

" exec 'imap <expr> <cr>    pumvisible() ? "\<CR>"       : "\<Plug>(CustomCocCR)'.maparg('<cr>', 'i').'"'
" imap <cr>     <Plug>(CustomCocCR)<Plug>delimitMateCR<Plug>DiscretionaryEnd
exec 'imap <cr>    <Plug>(CustomCocCR)'.maparg('<cr>', 'i')

" inoremap <expr> <C-J>   pumvisible() ? "\<C-N>"         : "\<C-J>"
" inoremap <expr> <C-K>   pumvisible() ? "\<C-P>"         : "\<C-K>"

inoremap <C-K> <Up>
inoremap <C-J> <Down>

inoremap <C-H> <Left>
inoremap <C-L> <Right>

cnoremap <C-K> <Up>
cnoremap <C-J> <Down>

call my#keymap#leader('fec', '+COC')

noremap                       <plug>(File/Edit/COC/Config)          :CocConf<cr>
nmap    <leader>fecc          <plug>(File/Edit/COC/Config)

call my#keymap#leader('ac', '+COC')

noremap                       <plug>(App/COC/Restart)               :CocRestart<cr>
nmap    <leader>acR           <plug>(App/COC/Restart)

noremap                       <plug>(App/COC/Update)                :CocUpdate<cr>
nmap    <leader>acu           <plug>(App/COC/Update)


map     <silent>              <plug>(App/COC/First)      gg<Plug>(coc-diagnostic-next)
nmap    <leader>acf           <plug>(App/COC/First)

map     <silent>              <plug>(App/COC/Next)       <Plug>(coc-diagnostic-next)
map     <leader>acn           <plug>(App/COC/Next)

map     <silent>              <plug>(App/COC/Prev)       <Plug>(coc-diagnostic-prev)
nmap    <leader>acp           <plug>(App/COC/Prev)

map     <silent>              <plug>(App/COC/Info)       <Plug>(coc-diagnostic-info)
nmap    <leader>aci           <plug>(App/COC/Info)

" call my#keymap#leader('acg', 'Go-To')
" call my#keymap#leader('acr', 'Refactoring')
" call my#keymap#localleader('g', '+Go-To')


nmap <silent> gd             <Plug>(coc-definition)
nmap <silent> gy             <Plug>(coc-type-definition)
nmap <silent> gi             <Plug>(coc-implementation)
nmap <silent> gr             <Plug>(coc-references)

call my#keymap#localleader('c',  '+COC')
call my#keymap#localleader('cd', '+Diagnostic')

" NOTE: we can't call the getConfig now, as COC has'nt started yet
" so we will remap on first use
function! s:remap_diagnostic(op)
  let l:map = {
        \ 'first': "(First-Diagnostic)",
        \ 'next':  "(Next-Diagnostic)",
        \ 'prev':  "(Prev-Diagnostic)",
        \ 'info':  "(Diagnostic-Info)"
        \ }[a:op]
  if coc#rpc#request('getConfig', ['diagnostic'])['displayByAle']
    nmap <silent> <plug>(First-Diagnostic) <Plug>(App/ALE/First)
    nmap <silent> <plug>(Next-Diagnostic)  <Plug>(App/ALE/Next)
    nmap <silent> <plug>(Prev-Diagnostic)  <plug>(App/ALE/Prev)
    nmap <silent> <plug>(Diagnostic-Info)  <Plug>(App/ALE/Detail)
  else
    nmap <silent> <plug>(First-Diagnostic) <Plug>(App/COC/First)
    nmap <silent> <plug>(Next-Diagnostic)  <Plug>(App/COC/Next)
    nmap <silent> <plug>(Prev-Diagnostic)  <Plug>(App/COC/Prev)
    nmap <silent> <plug>(Diagnostic-Info)  <Plug>(App/COC/Info)
  endif
  exe "normal \<plug>" . l:map
endfunction

nnoremap <plug>(First-Diagnostic) :call <SID>remap_diagnostic('first')<CR>
nnoremap <plug>(Next-Diagnostic)  :call <SID>remap_diagnostic('next')<CR>
nnoremap <plug>(Prev-Diagnostic)  :call <SID>remap_diagnostic('prev')<CR>
nnoremap <plug>(Diagnostic-Info)  :call <SID>remap_diagnostic('info')<CR>

nmap <silent> <localleader>1 <plug>(First-Diagnostic)
nmap <silent> <localleader>n <plug>(Next-Diagnostic)
nmap <silent> <localleader>p <plug>(Prev-Diagnostic)
nmap <silent> <localleader>? <plug>(Diagnostic-Info)

nmap    <localleader>ca       <Plug>(coc-codeaction)
nmap    <localleader>cL       <Plug>(coc-codeaction-line)
xmap    <localleader>ca       <Plug>(coc-codeaction-selected)

noremap                       <Plug>(COC/Command)   :CocCommand<cr>
nmap    <localleader>cc       <Plug>(COC/Command)

call my#keymap#localleader('r', '+Refactoring')

nmap    <localleader>rr       <Plug>(coc-rename)

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  elseif (coc#rpc#ready())
    call CocActionAsync('doHover')
  else
    execute '!' . &keywordprg . " " . expand('<cword>')
  endif
endfunction
nnoremap <silent> K           :call <SID>show_documentation()<CR>

noremap                       <plug>(Outline)                       :CocList outline<cr>
nmap    <localleader>o        <plug>(Outline)

noremap                       <plug>(Show-Signature)                :call CocActionAsync('showSignatureHelp')<cr>
nmap    <localleader>s        <plug>(Show-Signature)

noremap                       <plug>(COC/List)                      :CocList <space>
nmap    <localleader>l        <plug>(COC/List)
nmap    <localleader>cl       <plug>(COC/List)


noremap                       <plug>(COC/Fix)                       :CocFix<cr>
nmap    <localleader>F        <plug>(COC/Fix)
nmap    <localleader>cF       <plug>(COC/Fix)


map                           <plug>(COC/Fix-Current)               <Plug>(coc-fix-current)
nmap    <localleader>f        <plug>(COC/Fix-Current)
nmap    <localleader>cf       <plug>(COC/Fix-Current)

xmap    <localleader>=        <Plug>(coc-format-selected)
nmap    <localleader>=        V<Plug>(coc-format-selected)
nmap    <localleader>c=       <Plug>(coc-format)

call my#keymap#localleader('cg',  '+GoTo')

nmap <silent> <plug>(COC/Goto/Definition)     <Plug>(coc-definition)
nmap <silent> <plug>(COC/Goto/Type)           <Plug>(coc-type-definition)
nmap <silent> <plug>(COC/Goto/Implementation) <Plug>(coc-implementation)
nmap <silent> <plug>(COC/Goto/Reference)      <Plug>(coc-references)

nmap <localleader>cgd <plug>(COC/Goto/Definition)
nmap <localleader>cgt <plug>(COC/Goto/Type)
nmap <localleader>cgi <plug>(COC/Goto/Implementation)
nmap <localleader>cgr <plug>(COC/Goto/Reference)

xmap if <Plug>(coc-funcobj-i)
omap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap af <Plug>(coc-funcobj-a)
xmap ic <Plug>(coc-classobj-i)
omap ic <Plug>(coc-classobj-i)
xmap ac <Plug>(coc-classobj-a)
omap ac <Plug>(coc-classobj-a)
