let g:coc_snippet_next = '<TAB>'
let g:coc_snippet_prev = '<S-TAB>'

inoremap <expr> <C-J>   pumvisible() ? "\<C-N>"         : "\<C-J>"
inoremap <expr> <C-K>   pumvisible() ? "\<C-P>"         : "\<C-K>"

vmap <tab> <Plug>(coc-snippets-select)

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

inoremap <silent><expr> <TAB>
      \ pumvisible() ? coc#_select_confirm() :
      \ coc#expandableOrJumpable() ? "\<C-r>=coc#rpc#request('doKeymap', ['snippets-expand-jump',''])\<CR>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()

call SetLeaderMenu('f.e.c', 'COC')

call SetLeaderMenu('a.c', 'COC')
call SetLeaderMenu('a.c.g', 'Go-To')
call SetLeaderMenu('a.c.r', 'Refactoring')

call SetLocalLeaderMenu('g', 'Go-To')
call SetLocalLeaderMenu('r', 'Refactoring')

noremap                       <plug>(File/Edit/COC/Config)          :CocConf<cr>
nmap    <leader>fecc          <plug>(File/Edit/COC/Config)

map                           <plug>(App/COC/Action)                <Plug>(coc-codeaction)
nmap    <leader>aca           <plug>(App/COC/Action)
map                           <plug>(Action)                        <Plug>(coc-codeaction)
nmap    <localleader>a        <plug>(Action)

vmap                          <plug>(App/COC/Action)                <Plug>(coc-codeaction-selected)
vmap    <leader>aca           <plug>(App/COC/Action)
vmap                          <plug>(Action)                        <Plug>(coc-codeaction-selected)
vmap    <localleader>a        <plug>(Action)

map                           <plug>(App/COC/Go-To/Definition)      <Plug>(coc-definition)
nmap    <leader>acgd          <plug>(App/COC/Go-To/Definition)
map                           <plug>(Go-To/Definition)              <Plug>(coc-definition)
nmap    <localleader>gd       <plug>(Go-To/Definition)

map                           <plug>(App/COC/Go-To/Implementation)  <Plug>(coc-implementation)
nmap    <leader>acgi          <plug>(App/COC/Go-To/Implementation)
map                           <plug>(Go-To/Implementation)          <Plug>(coc-implementation)
nmap    <localleader>gi       <plug>(Go-To/Implementation)

map                           <plug>(App/COC/Go-To/Type-Definition) <Plug>(coc-type-definition)
nmap    <leader>acgt          <plug>(App/COC/Go-To/Type-Definition)
map                           <plug>(Go-To/Type-Definition)         <Plug>(coc-type-definition)
nmap    <localleader>gt       <plug>(Go-To/Type-Definition)


map                           <plug>(App/COC/Go-To/References)      <Plug>(coc-references)
nmap    <leader>acgr          <plug>(App/COC/Go-To/References)
map                           <plug>(Go-To/References)              <Plug>(coc-references)
nmap    <localleader>gr       <plug>(Go-To/References)


noremap                       <plug>(App/COC/Fix)                   :CocFix<cr>
nmap    <leader>acF           <plug>(App/COC/Fix)
map                           <plug>(COC/Fix-Current)               <Plug>(coc-fix-current)
nmap    <localleader>F        <plug>(COC/Fix-Current)


noremap                       <plug>(App/COC/List)                  :CocList <space>
nmap    <leader>acl           <plug>(App/COC/List)
noremap                       <plug>(List)                          :CocList <space>
nmap    <localleader>l        <plug>(List)

noremap                       <plug>(App/COC/Next)                  :CocNext<cr>
nmap    <leader>acn           <plug>(App/COC/Next)

noremap                       <plug>(App/COC/Prev)                  :CocPrev<cr>
nmap    <leader>acp           <plug>(App/COC/Prev)

noremap                       <plug>(App/COC/Info)                  :CocInfo<cr>
nmap    <leader>aci           <plug>(App/COC/Info)

noremap                       <plug>(App/COC/Restart)               :CocRestart<cr>
nmap    <leader>acR           <plug>(App/COC/Restart)

noremap                       <plug>(App/COC/Update)                :CocUpdate<cr>
nmap    <leader>acu           <plug>(App/COC/Update)


map                           <plug>(App/COC/Refactoring/Rename)    <Plug>(coc-rename)
nmap    <leader>acrr          <plug>(App/COC/Refactoring/Rename)
map                           <plug>(Refactoring/Rename)            <Plug>(coc-rename)
nmap    <localleader>rr       <plug>(Refactoring/Rename)

noremap                       <plug>(Hover)                         :call CocActionAsync('doHover')<cr>
nmap    <localleader>K        <plug>(Hover)

noremap                       <plug>(Outline)                       :CocList outline<cr>
nmap    <localleader>o        <plug>(Outline)

noremap                       <plug>(Show-Signature)                :call CocActionAsync('showSignatureHelp')<cr>
nmap    <localleader>s        <plug>(Show-Signature)
